{"mappings":"AAsHS,IAAIA,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAPiBC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EASvDC,YAAW,KACLJ,GAAS,EACXF,EAAQE,GAERD,EAASC,KAEF,IAARA,MAGOK,MAhBIL,GAASM,QAAQC,IAAI,oBAAkBP,WAgB3BQ,OAfdR,GAASM,QAAQC,IAAI,oBAAkBP","sources":["src/js/promise.js"],"sourcesContent":["/*\n * Проміси\n */\n\n//? конструктор new Promise(callback(resolve, reject));\n\n// const promise = new Promise((resolve, reject) => {\n// setTimeout(() => {\n//   console.log('setTimeout in promise after 1s');\n//   resolve('good!');\n// }, 1000);\n//   reject('not good!');\n// });\n\n// let value = '';\n\n// promise\n//   .then(data => {\n//     console.log(data);\n//   })\n//   .catch(error => {\n//     console.log(error);\n//   });\n\n// console.log('value', value);\n\n// В якому порядку будуть виведені в консоль значення?\n\n// setTimeout(() => {\n//   console.log('setTimeout');\n// }, 0);\n\n// console.log('console.log: 1');\n\n// Promise.resolve()\n//   .then(() => {\n//     console.log('promise: 1');\n//   })\n//   .then(() => {\n//     console.log('promise: 2');\n//   });\n\n// console.log('console.log: 2');\n\n//? TASK 01\n// Чи можна \"перевиконати\" проміс?\n\n// promise перевиконати не можна\n\n//? TASK 02\n// Що буде у консолі\n\n// const promise = new Promise((resolve, reject) => {\n//   resolve('1');\n// });\n\n// promise\n//   .then(data => {\n//     console.log(data);\n//     return data;\n//   })\n//   .then(data => {\n//     console.log(data);\n//     if (!data) {\n//       throw new Error('Error in then!');\n//     }\n//     return '2';\n//   })\n//   .then(data => {\n//     console.log(data);\n//   })\n//   .catch(error => {\n//     console.log(error);\n//   })\n//   .finally(() => {\n//     console.log('data in finally', data);\n//   });\n\n//? TASK 03\n// Що буде у консолі\n\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     reject('good!');\n//   }, 1000);\n//   resolve('error');\n// });\n\n// promise\n//   .then(data => {\n//     console.log(data);\n//     return data;\n//   })\n//   .then(data => {\n//     console.log(data);\n//     return '2';\n//   })\n//   .then(data => {\n//     console.log(data);\n//   })\n//   .catch(error => {\n//     console.log(error);\n//   });\n\n/*\n * Є функція, яка генерує випадкові числа від 1 до 4.\n * Написати функцію, яка повертає проміс.\n * Зробіть так, щоб згенероване число було із затримкою функції setTimeout в секундах.\n * Оберніть все це в проміс, який у будь-якому разі повертає час затримки (і в resolve, і в reject).\n * Нехай проміс виконається успішно, якщо згенеровано 1 або 2 (`✅ Resolved after ${delay} sec`), і з помилкою - якщо 3 або 4 (`❌ Rejected after ${delay} sec`).\n */\n\nconst randomNumber = () => Math.round(Math.random() * 3) + 1;\n\nconst onSuccess = delay => console.log(`✅ Resolved after ${delay} sec`);\nconst onError = delay => console.log(`❌ Rejected after ${delay} sec`);\n\nconst makePromise = () => {\n  return new Promise((resolve, rejected) => {\n    const delay = randomNumber();\n\n    setTimeout(() => {\n      if (delay <= 2) {\n        resolve(delay);\n      } else {\n        rejected(delay);\n      }\n    }, delay * 1000);\n  });\n};\nmakePromise().then(onSuccess).catch(onError);\n"],"names":["Promise","resolve","rejected","delay","Math","round","random","setTimeout","then","console","log","catch"],"version":3,"file":"promise.1e7cd838.js.map"}